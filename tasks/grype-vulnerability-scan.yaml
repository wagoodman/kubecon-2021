
kind: Task
apiVersion: tekton.dev/v1beta1
metadata:
  name: grype-vulnerability-scan

spec:
  description: >-
    Scan an SBOM or container image for known vulnerabilities
  params:
    - name: input
      description: The image reference or SBOM file to scan
    - name: grype-image
      description: The grype image to use to perform the vulnerability scan
      default: 'docker.io/anchore/grype:v0.23.0'
    - name: extra-args
      type: string
      default: ""

  workspaces:
    - name: scan-target
      optional: true
    - name: output

  results:
    - name: report-filename
      description: The name of the vulnerability scan report file generated in the output workspace
    - name: grype-exit-code
      description: The exit code of the grype scan

  steps:
    - name: vulnerability-scan
      image: $(params.grype-image)
      # we must combine our scan and quality gates since we are using a workspace due to a bug in onError https://github.com/tektoncd/pipeline/issues/4253
      # onError: continue
      script: |
        #!/usr/bin/env sh
        set +e
        /grype -vv -o json $(params.extra-args) --file $(workspaces.output.path)/vulnerability-scan.json $(params.input)
        rc=$?
        echo $rc | tee $(results.grype-exit-code.path)

    - name: show-vulnerability-summary
      image: python:slim
      env:
        - name: REPORT_PATH
          value: $(workspaces.output.path)/vulnerability-scan.json
      script: |
        #!/usr/bin/env python
        import json
        import os
        import sys

        with open(os.environ["REPORT_PATH"]) as f:
            contents = json.load(f)

        if len(contents["matches"]) == 0:
          print("No vulnerabilities found")
          sys.exit(0)

        print(f"{'ID':20s} {'SEVERITY':12s} {'PACKAGE':35s} {'TYPE':7s} {'URL':10s}")
        for match in contents["matches"]:
            print(f"{match['vulnerability']['id']:20s} {match['vulnerability']['severity']:12s} {match['artifact']['name'] + ' @ ' + match['artifact']['version']:35s} {match['artifact']['type']:7s} {match['vulnerability']['dataSource']:10s}")

    - name: quality-gate
      image: bash:latest
      env:
        - name: RC_PATH
          value: $(results.grype-exit-code.path)
      script: |
        #!/usr/bin/env bash
        set -ue
        if [[ "$(cat $RC_PATH)" != "0" ]]; then
            echo "FAIL: At least one of the vulnerabilities was at or above the allowable severity threshold set"
            exit 1
        else
            echo "PASS: Discovered no vulnerabilities at or above the severity threshold"
        fi

    - name: capture-report-filename
      image: bash:latest
      script: |
        #!/usr/bin/env bash
        echo vulnerability-scan.json | tee $(results.report-filename.path)